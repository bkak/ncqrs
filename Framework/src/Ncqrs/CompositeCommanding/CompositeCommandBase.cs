using System;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Threading;
using Ncqrs.Commanding;
using Ncqrs.Commanding.CommandExecution.Mapping.Attributes;

namespace Ncqrs.CompositeCommanding
{
    [Serializable]
    [DataContract]
    public class CompositeCommandBase : ICompositeCommand
    {
        /// <summary>
        /// Gets the unique identifier for this CompositeCommand.
        /// </summary>
        public Guid CompositeCommandIdentifier
        {
            get;
            private set;
        }

        private IList<ICommand> _commands;
        private short _sequenceNo = 0;
        protected CompositeCommandBase(Guid compositeCommandIdentifier)
        {
            CompositeCommandIdentifier = compositeCommandIdentifier;

        }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompositeCommandBase"/> class.
        /// This initializes the <see cref="CompositeCommandIdentifier"/> with the result
        /// of the <see cref="IUniqueIdentifierGenerator">generator</see> set in 
        /// the <see cref="NcqrsEnvironment"/>.
        /// </summary>
        /// <remarks>
        /// This uses the <see cref="NcqrsEnvironment.Get{IUniqueIdentifierGenerator}"/> to get
        /// the generator to use to generate the command identifier.
        /// </remarks>
        public CompositeCommandBase()
            : this(NcqrsEnvironment.Get<IUniqueIdentifierGenerator>())
        {
            // Nothing.
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompositeCommandBase"/> class. This will set
        /// the <see cref="CompositeCommandIdentifier"/> to a identifier value generated by the 
        /// <paramref name="idGenerator"/>.
        /// </summary>
        /// <param name="idGenerator">The id generator. This cannot be <c>null</c>.</param>
        protected CompositeCommandBase(IUniqueIdentifierGenerator idGenerator)
        {
            Contract.Requires<ArgumentNullException>(idGenerator != null);

            CompositeCommandIdentifier = idGenerator.GenerateNewId();
            _commands = new List<ICommand>();
        }
        /// <summary>
        /// Adds a command <see cref="CommandBase"/> class. This will add
        /// a command  <see cref="CommandBase"/> to a Composite Commands
        /// <paramref name="command"/>.
        /// </summary>
        /// <param name="command">This is a Command. This cannot be <c>null</c>.</param>
        public void AddCommand(ICommand command)
        {
            Contract.Requires<ArgumentNullException>(command != null);
            _sequenceNo++;
            command.SetCompositeCommandIdentifier(CompositeCommandIdentifier);
            command.SetSequenceNo(_sequenceNo);
            _commands.Add(command);
        }
        /// <summary>
        /// Removes a command <see cref="CommandBase"/> class. This will remove
        /// a command  <see cref="CommandBase"/> from Composite Commands
        /// <paramref name="command"/>.
        /// </summary>
        /// <param name="command">This is a Command. This cannot be <c>null</c>.</param>
        public void RemoveCommand(ICommand command)
        {
            Contract.Requires<ArgumentNullException>(command != null);

            var doesExist = _commands.Contains(command);

            if (!doesExist)
                throw new IndexOutOfRangeException("Trying to remove invalid command");
            _commands.Remove(command);
        }
        /// <summary>
        /// Removes a command <see cref="commandIdentifier"/> class. This will remove
        /// a command of  <see cref="commandIdentifier"/> from Composite Commands
        /// <paramref name="commandIdentifier"/>.
        /// </summary>
        /// <param name="commandIdentifier">This is a Command Identifier. This cannot be <c>null</c>.</param>
        public void RemoveCommand(Guid commandIdentifier)
        {
            var command = _commands.FirstOrDefault(x => x.CommandIdentifier == commandIdentifier);
            if (command == null)
                throw new IndexOutOfRangeException("Trying to remove invalid command");
            _commands.Remove(command);
        }

        public IEnumerable<ICommand> Commands
        {
            get { return _commands; }
        }
    }
}
